cat > button.tsx << 'BTNEOF'
import * as React from "react";import {Slot} from "@radix-ui/react-slot";import {cva,type VariantProps} from "class-variance-authority";import {cn} from "@/lib/utils";const buttonVariants=cva("inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}});export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>,VariantProps<typeof buttonVariants>{asChild?:boolean}const Button=React.forwardRef<HTMLButtonElement,ButtonProps>(({className,variant,size,asChild=false,...props},ref)=>{const Comp=asChild?Slot:"button";return(<Comp className={cn(buttonVariants({variant,size,className}))} ref={ref}{...props}/>)});Button.displayName="Button";export{Button,buttonVariants}
BTNEOF
cat > card.tsx << 'CRDEOF'
import * as React from "react";import {cn} from "@/lib/utils";const Card=React.forwardRef<HTMLDivElement,React.HTMLAttributes<HTMLDivElement>>(({className,...props},ref)=>(<div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm",className)}{...props}/>));Card.displayName="Card";const CardHeader=React.forwardRef<HTMLDivElement,React.HTMLAttributes<HTMLDivElement>>(({className,...props},ref)=>(<div ref={ref} className={cn("flex flex-col space-y-1.5 p-6",className)}{...props}/>));CardHeader.displayName="CardHeader";const CardTitle=React.forwardRef<HTMLParagraphElement,React.HTMLAttributes<HTMLHeadingElement>>(({className,...props},ref)=>(<h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight",className)}{...props}/>));CardTitle.displayName="CardTitle";const CardDescription=React.forwardRef<HTMLParagraphElement,React.HTMLAttributes<HTMLParagraphElement>>(({className,...props},ref)=>(<p ref={ref} className={cn("text-sm text-muted-foreground",className)}{...props}/>));CardDescription.displayName="CardDescription";const CardContent=React.forwardRef<HTMLDivElement,React.HTMLAttributes<HTMLDivElement>>(({className,...props},ref)=>(<div ref={ref} className={cn("p-6 pt-0",className)}{...props}/>));CardContent.displayName="CardContent";const CardFooter=React.forwardRef<HTMLDivElement,React.HTMLAttributes<HTMLDivElement>>(({className,...props},ref)=>(<div ref={ref} className={cn("flex items-center p-6 pt-0",className)}{...props}/>));CardFooter.displayName="CardFooter";export{Card,CardHeader,CardFooter,CardTitle,CardDescription,CardContent}
CRDEOF
cat > input.tsx << 'INPEOF'
import * as React from "react";import {cn} from "@/lib/utils";export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement>{}const Input=React.forwardRef<HTMLInputElement,InputProps>(({className,type,...props},ref)=>{return(<input type={type} className={cn("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",className)} ref={ref}{...props}/>)});Input.displayName="Input";export{Input}
INPEOF
cat > textarea.tsx << 'TXTEOF'
import * as React from "react";import {cn} from "@/lib/utils";export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement>{}const Textarea=React.forwardRef<HTMLTextAreaElement,TextareaProps>(({className,...props},ref)=>{return(<textarea className={cn("flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",className)} ref={ref}{...props}/>)});Textarea.displayName="Textarea";export{Textarea}
TXTEOF
cat > label.tsx << 'LBLEOF'
import * as React from "react";import * as LabelPrimitive from "@radix-ui/react-label";import {cva,type VariantProps} from "class-variance-authority";import {cn} from "@/lib/utils";const labelVariants=cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70");const Label=React.forwardRef<React.ElementRef<typeof LabelPrimitive.Root>,React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>&VariantProps<typeof labelVariants>>(({className,...props},ref)=>(<LabelPrimitive.Root ref={ref} className={cn(labelVariants(),className)}{...props}/>));Label.displayName=LabelPrimitive.Root.displayName;export{Label}
LBLEOF
cat > checkbox.tsx << 'CHKEOF'
import * as React from "react";import * as CheckboxPrimitive from "@radix-ui/react-checkbox";import {Check} from "lucide-react";import {cn} from "@/lib/utils";const Checkbox=React.forwardRef<React.ElementRef<typeof CheckboxPrimitive.Root>,React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>>(({className,...props},ref)=>(<CheckboxPrimitive.Root ref={ref} className={cn("peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",className)}{...props}><CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}><Check className="h-4 w-4"/></CheckboxPrimitive.Indicator></CheckboxPrimitive.Root>));Checkbox.displayName=CheckboxPrimitive.Root.displayName;export{Checkbox}
CHKEOF
cat > badge.tsx << 'BDGEOF'
import * as React from "react";import {cva,type VariantProps} from "class-variance-authority";import {cn} from "@/lib/utils";const badgeVariants=cva("inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}});export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>,VariantProps<typeof badgeVariants>{}function Badge({className,variant,...props}:BadgeProps){return(<div className={cn(badgeVariants({variant}),className)}{...props}/>)}export{Badge,badgeVariants}
BDGEOF
cat > sonner.tsx << 'SONEOF'
import {Toaster as Sonner} from "sonner";type ToasterProps=React.ComponentProps<typeof Sonner>;const Toaster=({...props}:ToasterProps)=>{return(<Sonner className="toaster group" toastOptions={{classNames:{toast:"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",description:"group-[.toast]:text-muted-foreground",actionButton:"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",cancelButton:"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground"}}}{...props}/>)};export{Toaster}
SONEOF
